// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.0
// source: account.sql

package db

import (
	"awesomeProject1/util"
	"context"
	"database/sql"
	"github.com/stretchr/testify/require"

	"testing"
)

func TestQueries_CreateAccount(t *testing.T) {
	createRandomAccount(t)
}

func TestQueries_GetAccount(t *testing.T) {
	account := createRandomAccount(t)

	account2, err := testQueries.GetAccount(context.Background(), account.ID)
	require.NoError(t, err)
	require.NotEmpty(t, account2)

	require.Equal(t, account2.Owner, account.Owner)
	require.Equal(t, account2.ID, account.ID)
	require.Equal(t, account2.Balance, account.Balance)
	require.Equal(t, account2.Currency, account.Currency)

}

func TestQueries_UpdateAccount(t *testing.T) {
	account := createRandomAccount(t)
	updateAccountParams := UpdateAccountsParams{
		ID:      account.ID,
		Balance: 123,
	}
	account2, err := testQueries.UpdateAccounts(context.Background(), updateAccountParams)
	require.NoError(t, err)
	require.NotEmpty(t, account2)

	require.Equal(t, account.ID, account2.ID)
	require.Equal(t, account2.Balance, updateAccountParams.Balance)
	require.Equal(t, account.Owner, account2.Owner)
	require.Equal(t, account.Currency, account2.Currency)

}

func TestQueries_DeleteAccount(t *testing.T) {
	randomAccount := createRandomAccount(t)
	err := testQueries.DeleteAccounts(context.Background(), randomAccount.ID)
	require.NoErrorf(t, err, "deleting accout")

	account, err := testQueries.GetAccount(context.Background(), randomAccount.ID)
	require.Error(t, err)
	require.Empty(t, account)
	require.Error(t, err, sql.ErrNoRows.Error())

}

func createRandomAccount(t *testing.T) Account {
	createAccountParams := CreateAccountParams{
		Owner:    util.RandomOwner(),
		Balance:  util.RandomMoney(),
		Currency: util.RandomCurrency(),
	}
	account, err := testQueries.CreateAccount(context.Background(), createAccountParams)

	require.NoError(t, err)
	require.NotEmpty(t, account)

	require.NotZero(t, account.ID)
	require.NotZero(t, account.CreatedAt)

	require.Equal(t, account.Owner, createAccountParams.Owner)
	require.Equal(t, account.Balance, createAccountParams.Balance)
	require.Equal(t, account.Currency, createAccountParams.Currency)
	return account
}

func TestQueries_ListAccounts(t *testing.T) {
	for i := 0; i < 10; i++ {
		createRandomAccount(t)
	}

	args := GetAccountsParams{
		Limit:  5,
		Offset: 5,
	}

	accounts, err := testQueries.GetAccounts(context.Background(), args)
	require.NoError(t, err)
	require.Len(t, accounts, 5)

	for _, account := range accounts {
		require.NotEmpty(t, account)
	}

}
